{
	"f_type": "InteractionTemplate",
	"f_version": "1.1.0",
	"id": "bd5854cfdd3ed2e23d696ce68a22dc4b3de57d5b2ef73cb1436350811d910791",
	"data": {
		"type": "transaction",
		"interface": "",
		"cadence": {
			"body": "import \"NonFungibleToken\"\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic NFT Transfer with Paths\",\n\tdescription: \"Transfer any Non-Fungible Token by providing the paths for the source Collection and destination Collection\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any storage path and receiver path instead of just the default.\n/// This lets you choose the token you want to send as well the capability you want to send it to.\n///\n/// Any token path can be passed as an argument here, so wallets should\n/// should check argument values to make sure the intended token path is passed in\n///\n/// @param to: The address to transfer the token to\n/// @param id: The id of the token to transfer\n/// @param senderPathIdentifier: The string identifier of the storage path\n///        where the token should be withdrawn from\n/// @param receiverPathIdentifier: The string identifier of the public path\n///        where the token should be deposited to\n///\ntransaction(to: Address, id: UInt64, senderPathIdentifier: String, receiverPathIdentifier: String) {\n\n    // The NFT resource to be transferred\n    let tempNFT: @{NonFungibleToken.NFT}\n\n    prepare(signer: auth(BorrowValue) \u0026Account) {\n\n        let storagePath = StoragePath(identifier: senderPathIdentifier)\n            ?? panic(\"Could not construct a storage path from the provided path identifier string\")\n\n        // borrow a reference to the signer's NFT collection\n        let withdrawRef = signer.storage.borrow\u003cauth(NonFungibleToken.Withdraw) \u0026{NonFungibleToken.Collection}\u003e(\n                from: storagePath\n            ) ?? panic(\"Account does not store a collection object at the specified path\")\n\n        self.tempNFT \u003c- withdrawRef.withdraw(withdrawID: id)\n    }\n\n    execute {\n        let publicPath = PublicPath(identifier: receiverPathIdentifier)\n            ?? panic(\"Could not construct a public path from the provided path identifier string\")\n\n        // get the recipients public account object\n        let recipient = getAccount(to)\n\n        // borrow a public reference to the receivers collection\n        let receiverRef = recipient.capabilities.borrow\u003c\u0026{NonFungibleToken.Receiver}\u003e(publicPath)\n            ?? panic(\"Could not borrow reference to the recipient's receiver\")\n\n        // Deposit the NFT to the receiver\n        receiverRef.deposit(token: \u003c-self.tempNFT)\n    }\n}",
			"network_pins": [
				{
					"network": "emulator",
					"pin_self": "0597c2f82b9b96626fb73309fec873e7c5ae34564a5501da40237a4a2e4257b0"
				},
				{
					"network": "mainnet",
					"pin_self": "6887607d32c1001210bffaa7fc985385e64b50d1c3da9df939429e884e47ba24"
				},
				{
					"network": "testnet",
					"pin_self": "cf9cd9e7e9399935b88bcde1c7283605da74eec147f5d63256a4340d61b742ff"
				}
			]
		},
		"parameters": [
			{
				"label": "to",
				"index": 0,
				"type": "Address",
				"messages": []
			},
			{
				"label": "id",
				"index": 1,
				"type": "UInt64",
				"messages": []
			},
			{
				"label": "senderPathIdentifier",
				"index": 2,
				"type": "String",
				"messages": []
			},
			{
				"label": "receiverPathIdentifier",
				"index": 3,
				"type": "String",
				"messages": []
			}
		],
		"dependencies": [
			{
				"contracts": [
					{
						"contract": "NonFungibleToken",
						"networks": [
							{
								"network": "mainnet",
								"address": "0x1d7e57aa55817448",
								"dependency_pin_block_height": 86393060,
								"dependency_pin": {
									"pin": "ab297380ce176ffbd8976e7805ebf180dcd8a65933c5607680941d565ff2ecf1",
									"pin_self": "e087a979d2220b9ff33a82751416bb9d2f9051a1aa2cc7383c00f37073c44006",
									"pin_contract_name": "NonFungibleToken",
									"pin_contract_address": "0x1d7e57aa55817448",
									"imports": [
										{
											"pin": "79e92db336f6cc98eb75c2153a706ec75491d64bf097439fb157d49edd5e5c2d",
											"pin_self": "de0788963b97da19cdb0f1d94211375522eac039013324b876290a95ff3c7c56",
											"pin_contract_name": "ViewResolver",
											"pin_contract_address": "0x1d7e57aa55817448",
											"imports": []
										}
									]
								}
							},
							{
								"network": "testnet",
								"address": "0x631e88ae7f1d7c20",
								"dependency_pin_block_height": 215458487,
								"dependency_pin": {
									"pin": "b12511cf8bc6237d06580340c0118c624dc4f4f0faee8d073417c9b1e09ae65f",
									"pin_self": "8396ebca01cd8d9ada9cd04f8a50dd85c2725fbb893d5a6a35ac9598237b725f",
									"pin_contract_name": "NonFungibleToken",
									"pin_contract_address": "0x631e88ae7f1d7c20",
									"imports": [
										{
											"pin": "79e92db336f6cc98eb75c2153a706ec75491d64bf097439fb157d49edd5e5c2d",
											"pin_self": "de0788963b97da19cdb0f1d94211375522eac039013324b876290a95ff3c7c56",
											"pin_contract_name": "ViewResolver",
											"pin_contract_address": "0x631e88ae7f1d7c20",
											"imports": []
										}
									]
								}
							},
							{
								"network": "emulator",
								"address": "0xf8d6e0586b0a20c7",
								"dependency_pin_block_height": 0,
								"dependency_pin": {
									"pin": "3752b59a6712df109692d94b27de7e3b4f9c5ed70b1ea189b150d3ee219a5ac6",
									"pin_self": "1cc75b367e4e7d8206c2fb6bbbd2a927d888a6926c2bac70f81d1926634e8817",
									"pin_contract_name": "NonFungibleToken",
									"pin_contract_address": "0xf8d6e0586b0a20c7",
									"imports": [
										{
											"pin": "79e92db336f6cc98eb75c2153a706ec75491d64bf097439fb157d49edd5e5c2d",
											"pin_self": "de0788963b97da19cdb0f1d94211375522eac039013324b876290a95ff3c7c56",
											"pin_contract_name": "ViewResolver",
											"pin_contract_address": "0xf8d6e0586b0a20c7",
											"imports": []
										}
									]
								}
							},
							{
								"network": "testing",
								"address": "0000000000000007",
								"dependency_pin_block_height": 0,
								"dependency_pin": {
									"pin": "",
									"pin_self": "",
									"pin_contract_name": "",
									"pin_contract_address": "",
									"imports": null
								}
							}
						]
					}
				]
			}
		],
		"messages": [
			{
				"key": "title",
				"i18n": [
					{
						"tag": "en-US",
						"translation": "Generic NFT Transfer with Paths"
					}
				]
			},
			{
				"key": "description",
				"i18n": [
					{
						"tag": "en-US",
						"translation": "Transfer any Non-Fungible Token by providing the paths for the source Collection and destination Collection"
					}
				]
			}
		]
	}
}